// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package swaprpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SwapServiceClient is the client API for SwapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SwapServiceClient interface {
	GetRates(ctx context.Context, in *GetRatesRequest, opts ...grpc.CallOption) (*GetRatesResponse, error)
	SendPayment(ctx context.Context, opts ...grpc.CallOption) (SwapService_SendPaymentClient, error)
	ReceivePayment(ctx context.Context, opts ...grpc.CallOption) (SwapService_ReceivePaymentClient, error)
}

type swapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSwapServiceClient(cc grpc.ClientConnInterface) SwapServiceClient {
	return &swapServiceClient{cc}
}

func (c *swapServiceClient) GetRates(ctx context.Context, in *GetRatesRequest, opts ...grpc.CallOption) (*GetRatesResponse, error) {
	out := new(GetRatesResponse)
	err := c.cc.Invoke(ctx, "/swapwallet.SwapService/GetRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapServiceClient) SendPayment(ctx context.Context, opts ...grpc.CallOption) (SwapService_SendPaymentClient, error) {
	stream, err := c.cc.NewStream(ctx, &SwapService_ServiceDesc.Streams[0], "/swapwallet.SwapService/SendPayment", opts...)
	if err != nil {
		return nil, err
	}
	x := &swapServiceSendPaymentClient{stream}
	return x, nil
}

type SwapService_SendPaymentClient interface {
	Send(*SendPaymentRequest) error
	Recv() (*SendPaymentResponse, error)
	grpc.ClientStream
}

type swapServiceSendPaymentClient struct {
	grpc.ClientStream
}

func (x *swapServiceSendPaymentClient) Send(m *SendPaymentRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *swapServiceSendPaymentClient) Recv() (*SendPaymentResponse, error) {
	m := new(SendPaymentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *swapServiceClient) ReceivePayment(ctx context.Context, opts ...grpc.CallOption) (SwapService_ReceivePaymentClient, error) {
	stream, err := c.cc.NewStream(ctx, &SwapService_ServiceDesc.Streams[1], "/swapwallet.SwapService/ReceivePayment", opts...)
	if err != nil {
		return nil, err
	}
	x := &swapServiceReceivePaymentClient{stream}
	return x, nil
}

type SwapService_ReceivePaymentClient interface {
	Send(*ReceivePaymentRequest) error
	Recv() (*ReceivePaymentResponse, error)
	grpc.ClientStream
}

type swapServiceReceivePaymentClient struct {
	grpc.ClientStream
}

func (x *swapServiceReceivePaymentClient) Send(m *ReceivePaymentRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *swapServiceReceivePaymentClient) Recv() (*ReceivePaymentResponse, error) {
	m := new(ReceivePaymentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SwapServiceServer is the server API for SwapService service.
// All implementations must embed UnimplementedSwapServiceServer
// for forward compatibility
type SwapServiceServer interface {
	GetRates(context.Context, *GetRatesRequest) (*GetRatesResponse, error)
	SendPayment(SwapService_SendPaymentServer) error
	ReceivePayment(SwapService_ReceivePaymentServer) error
	mustEmbedUnimplementedSwapServiceServer()
}

// UnimplementedSwapServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSwapServiceServer struct {
}

func (UnimplementedSwapServiceServer) GetRates(context.Context, *GetRatesRequest) (*GetRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRates not implemented")
}
func (UnimplementedSwapServiceServer) SendPayment(SwapService_SendPaymentServer) error {
	return status.Errorf(codes.Unimplemented, "method SendPayment not implemented")
}
func (UnimplementedSwapServiceServer) ReceivePayment(SwapService_ReceivePaymentServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceivePayment not implemented")
}
func (UnimplementedSwapServiceServer) mustEmbedUnimplementedSwapServiceServer() {}

// UnsafeSwapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwapServiceServer will
// result in compilation errors.
type UnsafeSwapServiceServer interface {
	mustEmbedUnimplementedSwapServiceServer()
}

func RegisterSwapServiceServer(s grpc.ServiceRegistrar, srv SwapServiceServer) {
	s.RegisterService(&SwapService_ServiceDesc, srv)
}

func _SwapService_GetRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapServiceServer).GetRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swapwallet.SwapService/GetRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapServiceServer).GetRates(ctx, req.(*GetRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwapService_SendPayment_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SwapServiceServer).SendPayment(&swapServiceSendPaymentServer{stream})
}

type SwapService_SendPaymentServer interface {
	Send(*SendPaymentResponse) error
	Recv() (*SendPaymentRequest, error)
	grpc.ServerStream
}

type swapServiceSendPaymentServer struct {
	grpc.ServerStream
}

func (x *swapServiceSendPaymentServer) Send(m *SendPaymentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *swapServiceSendPaymentServer) Recv() (*SendPaymentRequest, error) {
	m := new(SendPaymentRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SwapService_ReceivePayment_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SwapServiceServer).ReceivePayment(&swapServiceReceivePaymentServer{stream})
}

type SwapService_ReceivePaymentServer interface {
	Send(*ReceivePaymentResponse) error
	Recv() (*ReceivePaymentRequest, error)
	grpc.ServerStream
}

type swapServiceReceivePaymentServer struct {
	grpc.ServerStream
}

func (x *swapServiceReceivePaymentServer) Send(m *ReceivePaymentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *swapServiceReceivePaymentServer) Recv() (*ReceivePaymentRequest, error) {
	m := new(ReceivePaymentRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SwapService_ServiceDesc is the grpc.ServiceDesc for SwapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SwapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "swapwallet.SwapService",
	HandlerType: (*SwapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRates",
			Handler:    _SwapService_GetRates_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendPayment",
			Handler:       _SwapService_SendPayment_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceivePayment",
			Handler:       _SwapService_ReceivePayment_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "swaprpc/swaprpc.proto",
}
